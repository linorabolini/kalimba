import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, p as text, v as space, a as claim_element, b as children, q as claim_text, x as claim_space, f as detach_dev, g as attr_dev, h as add_location, H as listen_dev, j as insert_dev, r as append_dev, n as noop, I as destroy_each, J as run_all } from './index.e016ec25.js';

function BufferLoader(context, urlList, callback) {
	this.context = context;
	this.urlList = urlList;
	this.onload = callback;
	this.bufferList = new Array();
	this.loadCount = 0;
}

BufferLoader.prototype.loadBuffer = function(url, index) {
	// Load buffer asynchronously
	var request = new XMLHttpRequest();
	request.open("GET", url, true);
	request.responseType = "arraybuffer";

	var loader = this;

	request.onload = function() {
		// Asynchronously decode the audio file data in request.response
		loader.context.decodeAudioData(
			request.response,
			function(buffer) {
				if (!buffer) {
					alert("error decoding file data: " + url);
					return;
				}
				loader.bufferList[index] = buffer;
				if (++loader.loadCount == loader.urlList.length)
					loader.onload(loader.bufferList);
			},
			function(error) {
				console.error("decodeAudioData error", error);
			}
		);
	};

	request.onerror = function() {
		alert("BufferLoader: XHR error");
	};

	request.send();
};

BufferLoader.prototype.load = function() {
	for (var i = 0; i < this.urlList.length; ++i)
		this.loadBuffer(this.urlList[i], i);
};

const audioAPI = {
	context: undefined,
	load: audioFiles =>
		new Promise(resolve => {
			var AudioContext = window.AudioContext || window.webkitAudioContext;
			const context = new AudioContext();

			const playSound = (buffer, detune = 0) => {
				const source = context.createBufferSource(); // creates a sound source
				source.buffer = buffer; // tell the source which sound to play
				source.detune.value = detune;
				source.connect(context.destination); // connect the source to the context's destination (the speakers)
				source.start(0); // play the source now
			};

			const bufferLoader = new BufferLoader(context, audioFiles, sounds =>
				resolve({
					sounds,
					context,
					playSound
				})
			);

			bufferLoader.load();
		})
};

const INTRO = [
	["E3"],
	[],
	["E3"],
	["E3"],
	[],
	["E3"],
	["E3"],
	[],
	["E3"],
	["E3"],
	["E3"],
	["E3"],
	["E3"],
	[],
	["E3"],
	["E3"],
	[],
	["E3"],
	["E3"]
];

const P1 = [
	["B4"],
	["D4"],
	["E4", "E3"],
	[],
	["E4", "G3"],
	[],
	["E4"],
	["F#5"],
	["G5", "C3"],
	[],
	["G5", "E3"],
	[],
	["G5"],
	["A5"],
	["D3", "F#5"],
	[],
	["F#4", "F#5"]
];

var pirates = [
	...INTRO,
	...P1,
	[],
	["E4"],
	["D4"],
	["E3", "G4", "B4", "D4"],
	["E4"],
	[],
	...P1,
	[],
	["E4"],
	["D4"],
	["E3", "E4"],
	[],
	[],
	["B4"],
	["D4"],
	["E4", "E3"],
	[],
	["E4", "G3"],
	[],
	["E4"],
	["G5"],
	["D3", "A5"],
	[],
	["F#4", "A5"],
	[],
	["A5"],
	["B5"],
	["C3", "C5"],
	[],
	["E3", "C5"],
	[],
	["B5"],
	["A5"],
	["E3", "B5"],
	["E4"],
	[],
	["G4"],
	["B4"],
	["E4"],
	["F#5"],
	[],
	["C3", "G5"],
	[],
	["E4", "G5"],
	[],
	["A5"],
	[],
	["E3", "B5"],
	["E4"],
	[],
	["G4"],
	["B4"],
	["E4"],
	["G5"],
	[],
	["D3", "F#5"],
	[],
	["F#4", "F#5"],
	[],
	["G5"],
	["E4"],
	["D3", "F#5"], // 18
	[],
	[],
	...P1,
	[],
	["E4"],
	["D4"],
	["E3", "G4", "B4", "D4"],
	["E4"],
	[],
	...P1,
	[],
	["E4"],
	["D4"],
	["E3", "E4"],
	[],
	["F#5"], // 34
	[],
	["G5", "C3"],
	[],
	["G5", "E3"],
	[],
	["A5"],
	[],
	["B5", "E3", "G4", "B4"],
	[],
	[],
	["G5"],
	["E4"],
	["B4"],
	[],
	[],
	[],
	["C3", "E3", "G4", "C5"],
	[],
	[],
	[],
	["G5"],
	["E4"],
	["C4"],
	[],
	[],
	["A4", "F#4", "D3", "F#5"],
	[]
];

const song = [
	["G5"],
	[],
	["B5"],
	[],
	["G5"],
	[],
	["F#5", "B4", "D4"],
	[],
	[],
	[],
	[],
	[],
	[],
	[],
	[],
	["F#5"],
	[],
	["A5"],
	[],
	["F#5"],
	[],
	["D4", "A4"],
	[],
	[],
	[],
	[],
	["D4"],
	[],
	["F#5", "F#4"],
	[],
	["D4"],
	[],
	["C4", "E3"],
	[],
	[],
	[],
	[],
	[],
	[],
	[],
	[],
	["E4"],
	[],
	["B5", "B4"],
	[],
	[],
	[],
	["A5", "A4"],
	[],
	[],
	[],
	[],
	[],
	["E4"],
	[],
	["B5", "B4"],
	[],
	[],
	[],
	["A5", "A4"],
	[],
	[],
	[],
	["G5"],
	[],
	[],
	[],
    ["E4", "E3"],
    [],
	[],
    [],
    [],
	[],
	[],
];

var songs = {
	pirates,
	up: song
};

/* src/components/Kalimba.svelte generated by Svelte v3.12.1 */

const file = "src/components/Kalimba.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.key = list[i];
	child_ctx.indx = i;
	return child_ctx;
}

// (139:4) {#each KKEYS as key, indx}
function create_each_block(ctx) {
	var div, t0_value = ctx.key + "", t0, t1, div_active_value, dispose;

	function mouseover_handler() {
		return ctx.mouseover_handler(ctx);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, active: true, style: true }, false);
			var div_nodes = children(div);

			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(div, "class", "key svelte-bbsc4h");
			attr_dev(div, "active", div_active_value = ctx.active.includes(ctx.key));
			attr_dev(div, "style", `height: ${300 - ctx.KNOTES.indexOf(ctx.key) * 15}px`);
			add_location(div, file, 139, 6, 2586);
			dispose = listen_dev(div, "mouseover", mouseover_handler);
		},

		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
		},

		p: function update(changed, new_ctx) {
			ctx = new_ctx;
			if ((changed.active) && div_active_value !== (div_active_value = ctx.active.includes(ctx.key))) {
				attr_dev(div, "active", div_active_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_each_block.name, type: "each", source: "(139:4) {#each KKEYS as key, indx}", ctx });
	return block;
}

function create_fragment(ctx) {
	var div1, button0, t0, t1, button1, t2, t3, button2, t4, t5, div0, dispose;

	let each_value = ctx.KKEYS;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			button0 = element("button");
			t0 = text("PLAY PIRATES");
			t1 = space();
			button1 = element("button");
			t2 = text("PLAY UP");
			t3 = space();
			button2 = element("button");
			t4 = text("STOP SONGS");
			t5 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", {}, false);
			var div1_nodes = children(div1);

			button0 = claim_element(div1_nodes, "BUTTON", {}, false);
			var button0_nodes = children(button0);

			t0 = claim_text(button0_nodes, "PLAY PIRATES");
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);

			button1 = claim_element(div1_nodes, "BUTTON", {}, false);
			var button1_nodes = children(button1);

			t2 = claim_text(button1_nodes, "PLAY UP");
			button1_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);

			button2 = claim_element(div1_nodes, "BUTTON", {}, false);
			var button2_nodes = children(button2);

			t4 = claim_text(button2_nodes, "STOP SONGS");
			button2_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			add_location(button0, file, 133, 2, 2326);
			add_location(button1, file, 134, 2, 2402);
			add_location(button2, file, 135, 2, 2468);
			attr_dev(div0, "class", "kalimba svelte-bbsc4h");
			add_location(div0, file, 137, 2, 2527);
			add_location(div1, file, 132, 0, 2318);

			dispose = [
				listen_dev(button0, "click", ctx.click_handler),
				listen_dev(button1, "click", ctx.click_handler_1),
				listen_dev(button2, "click", ctx.click_handler_2)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, button0);
			append_dev(button0, t0);
			append_dev(div1, t1);
			append_dev(div1, button1);
			append_dev(button1, t2);
			append_dev(div1, t3);
			append_dev(div1, button2);
			append_dev(button2, t4);
			append_dev(div1, t5);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.active || changed.KKEYS || changed.KNOTES) {
				each_value = ctx.KKEYS;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div1);
			}

			destroy_each(each_blocks, detaching);

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	

  console.log(songs);

  audioAPI.load(["/kalimba.wav"]).then(a => {
    $$invalidate('api', api = a);
  });
  let songInterval;

  const NOTES = [
    "F",
    "F#",
    "G",
    "Ab",
    "A",
    "Bb",
    "B",
    "C",
    "C#",
    "D",
    "Eb",
    "E"
  ];

  const OCTAVES = [3, 4, 5];

  const notesDict = {};

  OCTAVES.forEach((o, octave) => {
    NOTES.forEach((n, note) => {
      $$invalidate('notesDict', notesDict[`${n}${o}`] = note * 100 + octave * 1200, notesDict);
    });
  });

  function stopSong() {
    clearInterval(songInterval);
  }

  function playSong(song) {
    const s = [...song];
    let t = 0;
    clearInterval(songInterval);
    songInterval = setInterval(() => {
      t++;
      if (t % 2) {
        $$invalidate('active', active = []);
        return;
      }

      const part = s.shift();
      if (!s.length) clearInterval(songInterval);
      $$invalidate('active', active = part);
      part.forEach(p => {
        const note = notesDict[p];
        if (!note) {
          console.log("Note not found: ", note);
        } else {
          api.playSound(api.sounds[0], note);
        }
      });
    }, 100);
  }

  const KNOTES = [
    "C3",
    "D3",
    "E3",
    "F#4",
    "G4",
    "A4",
    "B4",
    "C4",
    "D4",
    "E4",
    "F#5",
    "G5",
    "A5",
    "B5",
    "C5",
    "D5",
    "E5"
  ];

  let KKEYS = [];
  for (let i = 0; i < KNOTES.length; i++) {
    i % 2 ? KKEYS.unshift(KNOTES[i]) : KKEYS.push(KNOTES[i]);
  }

  console.log(KKEYS);

	const click_handler = () => playSong(songs['pirates']);

	const click_handler_1 = () => playSong(songs['up']);

	const click_handler_2 = () => stopSong();

	const mouseover_handler = ({ key }) => api.playSound(api.sounds[0], notesDict[key]);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ('songInterval' in $$props) songInterval = $$props.songInterval;
		if ('KKEYS' in $$props) $$invalidate('KKEYS', KKEYS = $$props.KKEYS);
		if ('api' in $$props) $$invalidate('api', api = $$props.api);
		if ('active' in $$props) $$invalidate('active', active = $$props.active);
	};

	let api, active;

	$$invalidate('api', api = {
        sounds: []
      });
	$$invalidate('active', active = []);

	return {
		notesDict,
		stopSong,
		playSong,
		KNOTES,
		KKEYS,
		api,
		active,
		click_handler,
		click_handler_1,
		click_handler_2,
		mouseover_handler
	};
}

class Kalimba extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Kalimba", options, id: create_fragment.name });
	}
}

export default Kalimba;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2FsaW1iYS41ODMxY2U0Ni5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hlbHBlcnMvYnVmZmVyTG9hZGVyLmpzIiwiLi4vLi4vLi4vc3JjL2hlbHBlcnMvYXVkaW9BUEkuanMiLCIuLi8uLi8uLi9zcmMvc29uZ3MvcGlyYXRlcy5qcyIsIi4uLy4uLy4uL3NyYy9zb25ncy91cC5qcyIsIi4uLy4uLy4uL3NyYy9zb25ncy9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0thbGltYmEuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIEJ1ZmZlckxvYWRlcihjb250ZXh0LCB1cmxMaXN0LCBjYWxsYmFjaykge1xuXHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXHR0aGlzLnVybExpc3QgPSB1cmxMaXN0O1xuXHR0aGlzLm9ubG9hZCA9IGNhbGxiYWNrO1xuXHR0aGlzLmJ1ZmZlckxpc3QgPSBuZXcgQXJyYXkoKTtcblx0dGhpcy5sb2FkQ291bnQgPSAwO1xufVxuXG5CdWZmZXJMb2FkZXIucHJvdG90eXBlLmxvYWRCdWZmZXIgPSBmdW5jdGlvbih1cmwsIGluZGV4KSB7XG5cdC8vIExvYWQgYnVmZmVyIGFzeW5jaHJvbm91c2x5XG5cdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdHJlcXVlc3Qub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuXHRyZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcblxuXHR2YXIgbG9hZGVyID0gdGhpcztcblxuXHRyZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIEFzeW5jaHJvbm91c2x5IGRlY29kZSB0aGUgYXVkaW8gZmlsZSBkYXRhIGluIHJlcXVlc3QucmVzcG9uc2Vcblx0XHRsb2FkZXIuY29udGV4dC5kZWNvZGVBdWRpb0RhdGEoXG5cdFx0XHRyZXF1ZXN0LnJlc3BvbnNlLFxuXHRcdFx0ZnVuY3Rpb24oYnVmZmVyKSB7XG5cdFx0XHRcdGlmICghYnVmZmVyKSB7XG5cdFx0XHRcdFx0YWxlcnQoXCJlcnJvciBkZWNvZGluZyBmaWxlIGRhdGE6IFwiICsgdXJsKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0bG9hZGVyLmJ1ZmZlckxpc3RbaW5kZXhdID0gYnVmZmVyO1xuXHRcdFx0XHRpZiAoKytsb2FkZXIubG9hZENvdW50ID09IGxvYWRlci51cmxMaXN0Lmxlbmd0aClcblx0XHRcdFx0XHRsb2FkZXIub25sb2FkKGxvYWRlci5idWZmZXJMaXN0KTtcblx0XHRcdH0sXG5cdFx0XHRmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiZGVjb2RlQXVkaW9EYXRhIGVycm9yXCIsIGVycm9yKTtcblx0XHRcdH1cblx0XHQpO1xuXHR9O1xuXG5cdHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHRcdGFsZXJ0KFwiQnVmZmVyTG9hZGVyOiBYSFIgZXJyb3JcIik7XG5cdH07XG5cblx0cmVxdWVzdC5zZW5kKCk7XG59O1xuXG5CdWZmZXJMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbigpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnVybExpc3QubGVuZ3RoOyArK2kpXG5cdFx0dGhpcy5sb2FkQnVmZmVyKHRoaXMudXJsTGlzdFtpXSwgaSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdWZmZXJMb2FkZXI7XG4iLCJpbXBvcnQgQnVmZmVyTG9hZGVyIGZyb20gXCIuL2J1ZmZlckxvYWRlclwiO1xuXG5jb25zdCBhdWRpb0FQSSA9IHtcblx0Y29udGV4dDogdW5kZWZpbmVkLFxuXHRsb2FkOiBhdWRpb0ZpbGVzID0+XG5cdFx0bmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0XHR2YXIgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xuXHRcdFx0Y29uc3QgY29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcblxuXHRcdFx0Y29uc3QgcGxheVNvdW5kID0gKGJ1ZmZlciwgZGV0dW5lID0gMCkgPT4ge1xuXHRcdFx0XHRjb25zdCBzb3VyY2UgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpOyAvLyBjcmVhdGVzIGEgc291bmQgc291cmNlXG5cdFx0XHRcdHNvdXJjZS5idWZmZXIgPSBidWZmZXI7IC8vIHRlbGwgdGhlIHNvdXJjZSB3aGljaCBzb3VuZCB0byBwbGF5XG5cdFx0XHRcdHNvdXJjZS5kZXR1bmUudmFsdWUgPSBkZXR1bmU7XG5cdFx0XHRcdHNvdXJjZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pOyAvLyBjb25uZWN0IHRoZSBzb3VyY2UgdG8gdGhlIGNvbnRleHQncyBkZXN0aW5hdGlvbiAodGhlIHNwZWFrZXJzKVxuXHRcdFx0XHRzb3VyY2Uuc3RhcnQoMCk7IC8vIHBsYXkgdGhlIHNvdXJjZSBub3dcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGJ1ZmZlckxvYWRlciA9IG5ldyBCdWZmZXJMb2FkZXIoY29udGV4dCwgYXVkaW9GaWxlcywgc291bmRzID0+XG5cdFx0XHRcdHJlc29sdmUoe1xuXHRcdFx0XHRcdHNvdW5kcyxcblx0XHRcdFx0XHRjb250ZXh0LFxuXHRcdFx0XHRcdHBsYXlTb3VuZFxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblxuXHRcdFx0YnVmZmVyTG9hZGVyLmxvYWQoKTtcblx0XHR9KVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXVkaW9BUEk7XG4iLCJjb25zdCBJTlRSTyA9IFtcblx0W1wiRTNcIl0sXG5cdFtdLFxuXHRbXCJFM1wiXSxcblx0W1wiRTNcIl0sXG5cdFtdLFxuXHRbXCJFM1wiXSxcblx0W1wiRTNcIl0sXG5cdFtdLFxuXHRbXCJFM1wiXSxcblx0W1wiRTNcIl0sXG5cdFtcIkUzXCJdLFxuXHRbXCJFM1wiXSxcblx0W1wiRTNcIl0sXG5cdFtdLFxuXHRbXCJFM1wiXSxcblx0W1wiRTNcIl0sXG5cdFtdLFxuXHRbXCJFM1wiXSxcblx0W1wiRTNcIl1cbl07XG5cbmNvbnN0IFAxX0EgPSBbW1wiQjRcIl0sIFtcIkQ0XCJdLCBbXCJFNFwiLCBcIkUzXCJdLCBbXSwgW1wiRTRcIiwgXCJHM1wiXV07XG5cbmNvbnN0IFAxID0gW1xuXHRbXCJCNFwiXSxcblx0W1wiRDRcIl0sXG5cdFtcIkU0XCIsIFwiRTNcIl0sXG5cdFtdLFxuXHRbXCJFNFwiLCBcIkczXCJdLFxuXHRbXSxcblx0W1wiRTRcIl0sXG5cdFtcIkYjNVwiXSxcblx0W1wiRzVcIiwgXCJDM1wiXSxcblx0W10sXG5cdFtcIkc1XCIsIFwiRTNcIl0sXG5cdFtdLFxuXHRbXCJHNVwiXSxcblx0W1wiQTVcIl0sXG5cdFtcIkQzXCIsIFwiRiM1XCJdLFxuXHRbXSxcblx0W1wiRiM0XCIsIFwiRiM1XCJdXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBbXG5cdC4uLklOVFJPLFxuXHQuLi5QMSxcblx0W10sXG5cdFtcIkU0XCJdLFxuXHRbXCJENFwiXSxcblx0W1wiRTNcIiwgXCJHNFwiLCBcIkI0XCIsIFwiRDRcIl0sXG5cdFtcIkU0XCJdLFxuXHRbXSxcblx0Li4uUDEsXG5cdFtdLFxuXHRbXCJFNFwiXSxcblx0W1wiRDRcIl0sXG5cdFtcIkUzXCIsIFwiRTRcIl0sXG5cdFtdLFxuXHRbXSxcblx0W1wiQjRcIl0sXG5cdFtcIkQ0XCJdLFxuXHRbXCJFNFwiLCBcIkUzXCJdLFxuXHRbXSxcblx0W1wiRTRcIiwgXCJHM1wiXSxcblx0W10sXG5cdFtcIkU0XCJdLFxuXHRbXCJHNVwiXSxcblx0W1wiRDNcIiwgXCJBNVwiXSxcblx0W10sXG5cdFtcIkYjNFwiLCBcIkE1XCJdLFxuXHRbXSxcblx0W1wiQTVcIl0sXG5cdFtcIkI1XCJdLFxuXHRbXCJDM1wiLCBcIkM1XCJdLFxuXHRbXSxcblx0W1wiRTNcIiwgXCJDNVwiXSxcblx0W10sXG5cdFtcIkI1XCJdLFxuXHRbXCJBNVwiXSxcblx0W1wiRTNcIiwgXCJCNVwiXSxcblx0W1wiRTRcIl0sXG5cdFtdLFxuXHRbXCJHNFwiXSxcblx0W1wiQjRcIl0sXG5cdFtcIkU0XCJdLFxuXHRbXCJGIzVcIl0sXG5cdFtdLFxuXHRbXCJDM1wiLCBcIkc1XCJdLFxuXHRbXSxcblx0W1wiRTRcIiwgXCJHNVwiXSxcblx0W10sXG5cdFtcIkE1XCJdLFxuXHRbXSxcblx0W1wiRTNcIiwgXCJCNVwiXSxcblx0W1wiRTRcIl0sXG5cdFtdLFxuXHRbXCJHNFwiXSxcblx0W1wiQjRcIl0sXG5cdFtcIkU0XCJdLFxuXHRbXCJHNVwiXSxcblx0W10sXG5cdFtcIkQzXCIsIFwiRiM1XCJdLFxuXHRbXSxcblx0W1wiRiM0XCIsIFwiRiM1XCJdLFxuXHRbXSxcblx0W1wiRzVcIl0sXG5cdFtcIkU0XCJdLFxuXHRbXCJEM1wiLCBcIkYjNVwiXSwgLy8gMThcblx0W10sXG5cdFtdLFxuXHQuLi5QMSxcblx0W10sXG5cdFtcIkU0XCJdLFxuXHRbXCJENFwiXSxcblx0W1wiRTNcIiwgXCJHNFwiLCBcIkI0XCIsIFwiRDRcIl0sXG5cdFtcIkU0XCJdLFxuXHRbXSxcblx0Li4uUDEsXG5cdFtdLFxuXHRbXCJFNFwiXSxcblx0W1wiRDRcIl0sXG5cdFtcIkUzXCIsIFwiRTRcIl0sXG5cdFtdLFxuXHRbXCJGIzVcIl0sIC8vIDM0XG5cdFtdLFxuXHRbXCJHNVwiLCBcIkMzXCJdLFxuXHRbXSxcblx0W1wiRzVcIiwgXCJFM1wiXSxcblx0W10sXG5cdFtcIkE1XCJdLFxuXHRbXSxcblx0W1wiQjVcIiwgXCJFM1wiLCBcIkc0XCIsIFwiQjRcIl0sXG5cdFtdLFxuXHRbXSxcblx0W1wiRzVcIl0sXG5cdFtcIkU0XCJdLFxuXHRbXCJCNFwiXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W1wiQzNcIiwgXCJFM1wiLCBcIkc0XCIsIFwiQzVcIl0sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtcIkc1XCJdLFxuXHRbXCJFNFwiXSxcblx0W1wiQzRcIl0sXG5cdFtdLFxuXHRbXSxcblx0W1wiQTRcIiwgXCJGIzRcIiwgXCJEM1wiLCBcIkYjNVwiXSxcblx0W11cbl07XG4iLCJjb25zdCBzb25nID0gW1xuXHRbXCJHNVwiXSxcblx0W10sXG5cdFtcIkI1XCJdLFxuXHRbXSxcblx0W1wiRzVcIl0sXG5cdFtdLFxuXHRbXCJGIzVcIiwgXCJCNFwiLCBcIkQ0XCJdLFxuXHRbXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtcIkYjNVwiXSxcblx0W10sXG5cdFtcIkE1XCJdLFxuXHRbXSxcblx0W1wiRiM1XCJdLFxuXHRbXSxcblx0W1wiRDRcIiwgXCJBNFwiXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtcIkQ0XCJdLFxuXHRbXSxcblx0W1wiRiM1XCIsIFwiRiM0XCJdLFxuXHRbXSxcblx0W1wiRDRcIl0sXG5cdFtdLFxuXHRbXCJDNFwiLCBcIkUzXCJdLFxuXHRbXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtcIkU0XCJdLFxuXHRbXSxcblx0W1wiQjVcIiwgXCJCNFwiXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W1wiQTVcIiwgXCJBNFwiXSxcblx0W10sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtdLFxuXHRbXCJFNFwiXSxcblx0W10sXG5cdFtcIkI1XCIsIFwiQjRcIl0sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtcIkE1XCIsIFwiQTRcIl0sXG5cdFtdLFxuXHRbXSxcblx0W10sXG5cdFtcIkc1XCJdLFxuXHRbXSxcblx0W10sXG5cdFtdLFxuICAgIFtcIkU0XCIsIFwiRTNcIl0sXG4gICAgW10sXG5cdFtdLFxuICAgIFtdLFxuICAgIFtdLFxuXHRbXSxcblx0W10sXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBzb25nO1xuIiwiaW1wb3J0IHBpcmF0ZXMgZnJvbSBcIi4vcGlyYXRlc1wiO1xuaW1wb3J0IHVwIGZyb20gXCIuL3VwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0cGlyYXRlcyxcblx0dXBcbn07XG4iLCI8c2NyaXB0PlxuICBpbXBvcnQgYXVkaW9BUEkgZnJvbSBcIi4uL2hlbHBlcnMvYXVkaW9BUEkuanNcIjtcbiAgaW1wb3J0IHNvbmdzIGZyb20gXCIuLi9zb25nc1wiO1xuXG4gIGNvbnNvbGUubG9nKHNvbmdzKTtcblxuICAkOiBhcGkgPSB7XG4gICAgc291bmRzOiBbXVxuICB9O1xuXG4gIGF1ZGlvQVBJLmxvYWQoW1wiL2thbGltYmEud2F2XCJdKS50aGVuKGEgPT4ge1xuICAgIGFwaSA9IGE7XG4gIH0pO1xuXG4gICQ6IGFjdGl2ZSA9IFtdO1xuXG4gIGNvbnN0IG5vdGVzID0gMTI7XG4gIGNvbnN0IG9jdGF2ZXMgPSAzO1xuICBsZXQgc29uZ0ludGVydmFsO1xuXG4gIGNvbnN0IE5PVEVTID0gW1xuICAgIFwiRlwiLFxuICAgIFwiRiNcIixcbiAgICBcIkdcIixcbiAgICBcIkFiXCIsXG4gICAgXCJBXCIsXG4gICAgXCJCYlwiLFxuICAgIFwiQlwiLFxuICAgIFwiQ1wiLFxuICAgIFwiQyNcIixcbiAgICBcIkRcIixcbiAgICBcIkViXCIsXG4gICAgXCJFXCJcbiAgXTtcblxuICBjb25zdCBPQ1RBVkVTID0gWzMsIDQsIDVdO1xuXG4gIGNvbnN0IG5vdGVzRGljdCA9IHt9O1xuXG4gIE9DVEFWRVMuZm9yRWFjaCgobywgb2N0YXZlKSA9PiB7XG4gICAgTk9URVMuZm9yRWFjaCgobiwgbm90ZSkgPT4ge1xuICAgICAgbm90ZXNEaWN0W2Ake259JHtvfWBdID0gbm90ZSAqIDEwMCArIG9jdGF2ZSAqIDEyMDA7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHN0b3BTb25nKCkge1xuICAgIGNsZWFySW50ZXJ2YWwoc29uZ0ludGVydmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXlTb25nKHNvbmcpIHtcbiAgICBjb25zdCBzID0gWy4uLnNvbmddO1xuICAgIGxldCB0ID0gMDtcbiAgICBjbGVhckludGVydmFsKHNvbmdJbnRlcnZhbCk7XG4gICAgc29uZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdCsrO1xuICAgICAgaWYgKHQgJSAyKSB7XG4gICAgICAgIGFjdGl2ZSA9IFtdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcnQgPSBzLnNoaWZ0KCk7XG4gICAgICBpZiAoIXMubGVuZ3RoKSBjbGVhckludGVydmFsKHNvbmdJbnRlcnZhbCk7XG4gICAgICBhY3RpdmUgPSBwYXJ0O1xuICAgICAgcGFydC5mb3JFYWNoKHAgPT4ge1xuICAgICAgICBjb25zdCBub3RlID0gbm90ZXNEaWN0W3BdO1xuICAgICAgICBpZiAoIW5vdGUpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGUgbm90IGZvdW5kOiBcIiwgbm90ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXBpLnBsYXlTb3VuZChhcGkuc291bmRzWzBdLCBub3RlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIGNvbnN0IEtOT1RFUyA9IFtcbiAgICBcIkMzXCIsXG4gICAgXCJEM1wiLFxuICAgIFwiRTNcIixcbiAgICBcIkYjNFwiLFxuICAgIFwiRzRcIixcbiAgICBcIkE0XCIsXG4gICAgXCJCNFwiLFxuICAgIFwiQzRcIixcbiAgICBcIkQ0XCIsXG4gICAgXCJFNFwiLFxuICAgIFwiRiM1XCIsXG4gICAgXCJHNVwiLFxuICAgIFwiQTVcIixcbiAgICBcIkI1XCIsXG4gICAgXCJDNVwiLFxuICAgIFwiRDVcIixcbiAgICBcIkU1XCJcbiAgXTtcblxuICBsZXQgS0tFWVMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBLTk9URVMubGVuZ3RoOyBpKyspIHtcbiAgICBpICUgMiA/IEtLRVlTLnVuc2hpZnQoS05PVEVTW2ldKSA6IEtLRVlTLnB1c2goS05PVEVTW2ldKTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKEtLRVlTKTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC5rYWxpbWJhIHtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICAgIGJhY2tncm91bmQ6IHVybCguLi91cDJfdGV4dHVyZS5qcGcpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBhZGRpbmc6IDYwcHggMjBweCAyMDBweDtcbiAgICBib3gtc2hhZG93OiAwcHggLTEzcHggNXB4IGluc2V0IHJnYmEoMCwgMCwgMCwgMC41KSxcbiAgICAgIDNweCAxMHB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjQpO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIH1cbiAgLmtleSB7XG4gICAgY29sb3I6IHJnYmEoMTUsIDE1LCAxNSwgMC43KTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDAwMDNiO1xuICAgIG1hcmdpbjogNHB4O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBoZWlnaHQ6IDEyMHB4O1xuICAgIHdpZHRoOiAzNXB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDAgMCA1cHggNXB4O1xuICAgIGJhY2tncm91bmQ6IHVybCguLi9tZXRhbF90ZXh0dXJlLmpwZyk7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICBib3gtc2hhZG93OiAwcHggLTFweCA3cHggaW5zZXQgI2ZmZmZmZiwgMHB4IDVweCAxMnB4IGJsYWNrO1xuICB9XG4gIC5rZXk6aG92ZXIsXG4gIC5rZXlbYWN0aXZlPVwidHJ1ZVwiXSB7XG4gICAgYmFja2dyb3VuZDogI2FlYWFkODtcbiAgfVxuPC9zdHlsZT5cblxuPGRpdj5cbiAgPGJ1dHRvbiBvbjpjbGljaz17KCkgPT4gcGxheVNvbmcoc29uZ3NbJ3BpcmF0ZXMnXSl9PlBMQVkgUElSQVRFUzwvYnV0dG9uPlxuICA8YnV0dG9uIG9uOmNsaWNrPXsoKSA9PiBwbGF5U29uZyhzb25nc1sndXAnXSl9PlBMQVkgVVA8L2J1dHRvbj5cbiAgPGJ1dHRvbiBvbjpjbGljaz17KCkgPT4gc3RvcFNvbmcoKX0+U1RPUCBTT05HUzwvYnV0dG9uPlxuXG4gIDxkaXYgY2xhc3M9XCJrYWxpbWJhXCI+XG4gICAgeyNlYWNoIEtLRVlTIGFzIGtleSwgaW5keH1cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJrZXlcIlxuICAgICAgICBhY3RpdmU9e2FjdGl2ZS5pbmNsdWRlcyhrZXkpfVxuICAgICAgICBzdHlsZT17YGhlaWdodDogJHszMDAgLSBLTk9URVMuaW5kZXhPZihrZXkpICogMTV9cHhgfVxuICAgICAgICBvbjptb3VzZW92ZXI9eygpID0+IGFwaS5wbGF5U291bmQoYXBpLnNvdW5kc1swXSwgbm90ZXNEaWN0W2tleV0pfT5cbiAgICAgICAge2tleX1cbiAgICAgIDwvZGl2PlxuICAgIHsvZWFjaH1cbiAgPC9kaXY+XG48L2Rpdj5cbiJdLCJuYW1lcyI6WyJ1cCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtDQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztDQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7Q0FDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Q0FDbkI7O0FBRUQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFOztDQUV4RCxJQUFJLE9BQU8sR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0NBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUMvQixPQUFPLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQzs7Q0FFckMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDOztDQUVsQixPQUFPLENBQUMsTUFBTSxHQUFHLFdBQVc7O0VBRTNCLE1B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QUFHO0NBQ1YsQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDWixFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLEtBQUssQ0FBQztDQUNQLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDWixFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztDQUNiLEVBQUU7Q0FDRixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7Q0FDZCxDQUFDOztBQUVGLGNBQWU7Q0FDZCxHQUFHLEtBQUs7Q0FDUixHQUFHLEVBQUU7Q0FDTCxFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ3hCLENBQUMsSUFBSSxDQUFDO0NBQ04sRUFBRTtDQUNGLEdBQUcsRUFBRTtDQUNMLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQztDQUNiLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osQ0FBQyxJQUFJLENBQUM7Q0FDTixFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxLQUFLLENBQUM7Q0FDUCxFQUFFO0NBQ0YsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDWixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7Q0FDYixFQUFFO0NBQ0YsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0NBQ2QsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7Q0FDYixFQUFFO0NBQ0YsRUFBRTtDQUNGLEdBQUcsRUFBRTtDQUNMLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDeEIsQ0FBQyxJQUFJLENBQUM7Q0FDTixFQUFFO0NBQ0YsR0FBRyxFQUFFO0NBQ0wsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDWixFQUFFO0NBQ0YsQ0FBQyxLQUFLLENBQUM7Q0FDUCxFQUFFO0NBQ0YsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztDQUN4QixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ3hCLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sQ0FBQyxJQUFJLENBQUM7Q0FDTixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixFQUFFO0NBQ0YsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7Q0FDMUIsRUFBRTtDQUNGLENBQUM7O0FDeEpGLE1BQU0sSUFBSSxHQUFHO0NBQ1osQ0FBQyxJQUFJLENBQUM7Q0FDTixFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixFQUFFO0NBQ0YsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNuQixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsS0FBSyxDQUFDO0NBQ1AsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sRUFBRTtDQUNGLENBQUMsS0FBSyxDQUFDO0NBQ1AsRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7Q0FDZCxFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUM7Q0FDTixFQUFFO0NBQ0YsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ1osRUFBRTtDQUNGLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixDQUFDLElBQUksQ0FBQztDQUNOLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDWixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7Q0FDWixFQUFFO0NBQ0YsRUFBRTtDQUNGLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztDQUNaLEVBQUU7Q0FDRixFQUFFO0NBQ0YsRUFBRTtDQUNGLENBQUMsSUFBSSxDQUFDO0NBQ04sRUFBRTtDQUNGLEVBQUU7Q0FDRixFQUFFO0lBQ0MsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQ1osRUFBRTtDQUNMLEVBQUU7SUFDQyxFQUFFO0lBQ0YsRUFBRTtDQUNMLEVBQUU7Q0FDRixFQUFFO0NBQ0YsQ0FBQzs7QUN4RUYsWUFBZTtDQUNkLE9BQU87S0FDUEEsSUFBRTtDQUNGLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozt5QkMwSU8sR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBSEksTUFBTSxDQUFDLFFB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
